@page "/signIn"
@page "/signIn/{id:int}"

@using LoginFront.Clients
@using LoginFront.models

@inject UserClient Client
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Login</PageTitle>
<h3>@title</h3>

@if (user is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@user" 
                      FormName="login" 
                      OnValidSubmit="HandleSubmitAsync"
                      Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="Nickname" class="form-label">Nickname:</label>
                    <InputText id="Nickname" @bind-Value="user.Nickname" class="form-control"/>
                    <ValidationMessage For="()=>user.Nickname" />
                </div>
                <div class="mb-3">
                    <label for="Email" class="form-label">Email:</label>
                    <InputText id="Email" @bind-Value="user.Email" class="form-control"/>
                    <ValidationMessage For="()=>user.Email" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private UserSummary? user { get; set; }
    
    private string title = string.Empty;
    private string buttonString = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (user is not null)
        {
            return;
        }
        
        if (Id is not null)
        {
            user = await Client.GetUserAsync(Id.Value);
            title = $"Edit User Info : {user.Nickname}";
            buttonString = "Edit";
        }
        else
        {
            user = new()
            {
                Nickname = string.Empty,
                Email = string.Empty
            };
            title = "login";
            buttonString = "로그인";
        }
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(user);

         if (Id is null)
         {
             await Client.AddUserAsync(user);
         }
         else
         {
             user.Id = Id.Value;
             await Client.UpdateUserAsync(user);
         }
        
        NavigationManager.NavigateTo("/");
    }
}